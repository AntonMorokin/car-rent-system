version: "3.4"
# noinspection ComposeUnknownKeys
name: "cms"

services:
  postgres:
    container_name: pgsql
    image: postgres:14.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    ports:
      - "5432:5432"
    volumes:
      - D:\repos\ContainersData\postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "sleep", "10"]
      interval: 15s
      timeout: 15s
      retries: 1

  mongo:
    container_name: mongodb
    image: mongo:6.0-focal
    hostname: mongo
    ports:
      - "27017:27017"
    volumes:
      - D:\repos\ContainersData\mongo\compose\db:/data/db
      - D:\repos\ContainersData\mongo\compose\configdb:/data/configdb
    command: "--noauth --replSet crs"
    healthcheck:
      test: ["CMD", "sleep", "20"]
      interval: 25s
      timeout: 25s
      retries: 1
  
  kafka:
    container_name: kafka
    image: bitnami/kafka:3.3.1
    ports:
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9094
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://kafka:9093,CONTROLLER://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://localhost:9092,EXTERNAL://kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_NUM_PARTITIONS=2
    volumes:
      - D:\repos\ContainersData\kafka:/bitnami/kafka
    healthcheck:
      test: ["CMD", "sleep", "30"]
      interval: 35s
      timeout: 35s
      retries: 1

  clients.webapi:
    container_name: clients-webapi
    image: ${DOCKER_REGISTRY-}clientswebapi
    build:
      context: .
      dockerfile: Clients/Clients.WebApi/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - CLIENTS_Db__ConnectionString=Host=postgres;Database=crs;Username=postgres;Password=1234
      - CLIENTS_Kafka__Address=kafka:9093
    ports:
      - "5000:5000"

  cars.webapi:
    container_name: cars-webapi
    image: ${DOCKER_REGISTRY-}carswebapi
    build:
      context: .
      dockerfile: Cars/Cars.WebApi/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:6000
      - CARS_Logging__LogLevel__Default=Debug
      - CARS_Db__ConnectionString=Host=postgres;Database=crs;Username=postgres;Password=1234
      - CARS_Kafka__Address=kafka:9093
    ports:
      - "6000:6000"

  rides.webapi:
    container_name: rides-webapi
    image: ${DOCKER_REGISTRY-}rideswebapi
    build:
      context: .
      dockerfile: Rides/Rides.WebApi/Dockerfile
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:7000
      - RIDES_Logging__LogLevel__Default=Debug
      - RIDES_Db__ConnectionString=mongodb://mongo:27017/?replicaSet=crs
      - RIDES_Kafka__Address=kafka:9093
    ports:
      - "7000:7000"